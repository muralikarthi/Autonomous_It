{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "loginUserName": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "The admin username to connect to the Virtual Machine after being deployed."
      }
    },
    "VMName": {
      "type": "string",
      "defaultValue": "myVirtualMachine",
      "metadata": {
        "description": "The name of the Virtual Machine to be used for creating a golden image."
      }
    },
    "VMSize": {
      "type": "string",
      "defaultValue": "Standard_B1s",
      "metadata": {
        "description": "Virtual Machine size option. Be aware that Premium SSD is not supported in every Virtual Machine option."
      }
    },
    "VMDataDiskSize": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "How much persistent disk storage you are going to allocate per Virtual Machine."
      }
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "16.04-LTS",
      "allowedValues": [
        "12.04-LTS",
        "14.04-LTS",
        "16.04-LTS",
        "18.04-LTS"
      ],
      "metadata": {
        "description": "The Linux OS that will be installed in the Virtual Machine."
      }
    },
    "authenticationMethod": {
      "type": "string",
      "defaultValue": "SSH Key",
      "allowedValues": [
          "SSH Key",
          "Password"
      ],
      "metadata": {
        "description": "This option could be either SSH key or Password."
      }
    },
    "authenticationKey": {
      "type": "securestring",
      "metadata": {
        "description": "Type SSH key or Password."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Specifies a project name that is used for generating resource names. Prefix must contain only lowercase alphanumeric characters."
      }
    },
    "lbSKU": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard"
      ],
      "metadata": {
        "description": "The Azure Load Balancer SKU. Please use the other ARM template for Basic SKU."
      }
    },
    "publicIPAllocation": {
      "type": "string",
      "defaultValue": "Static",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Public IP address assignment. Dynamic or Static."
      }
    },
    "publicIPVersion": {
      "type": "string",
      "defaultValue": "IPv4",
      "allowedValues": [
        "IPv4",
        "IPv6"
      ],
      "metadata": {
        "description": "Public IP address version. IPv4 or IPv6."
      }
    },
    "VNETAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "The Azure Virtual Network address range in CIDR notation (e.g. 192.168.1.0/16)."
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "The subnet's address range in CIDR notation (e.g. 192.168.1.0/24). It must be contained by the address space of the Azure Virtual Network."
      }
    },
    "LBFEPortRangeStart": {
      "type": "int",
      "defaultValue": 50000,
      "metadata": {
        "description": "Frontend IP configuration range start port."
      }
    },
    "LBFEPortRangeEnd": {
      "type": "int",
      "defaultValue": 50119,
      "metadata": {
        "description": "Frontend IP configuration range end port."
      }
    }
    "location": {
          "type": "string",
          "defaultValue": "[resourceGroup().location]",
          "metadata": {
              "description": "Location for all resources."
          }
      },
      "prefix": {
          "type": "string",
          "metadata": {
              "description": "The string that will precede all the Azure services for future identification purposes. Prefix must only contain lowercase letters, numbers, and hyphens."
          }
      },
      "mysqlUserName": {
          "type": "string",
          "minLength": 1,
          "defaultValue": "azuremysqluser",
          "metadata": {
              "description": "The admin username to connect to the MySQL server."
          }
      },
      "mysqlPassword": {
          "type": "securestring",
          "minLength": 8,
          "defaultValue": "CHang3thisP4Ssw0rD",
          "metadata": {
              "description": "The admin password to connect to the MySQL server. Change it for whichever you consider, as robust as possible."
          }
      },
      "mysqlDBName": {
          "type": "string",
          "minLength": 1,
          "defaultValue": "gamedb",
          "metadata": {
              "description": "The name of the game database."
          }
      },
      "mysqlBackupRetainedDays": {
          "type": "int",
          "maxValue": 35,
          "defaultValue": 7,
          "metadata": {
              "description": "The backup retention period."
          }            
      },
      "mysqlGeoRedundantBackup": {
          "type": "string",
          "allowedValues": [
              "Disabled",
              "Enabled"
          ],
          "defaultValue": "Disabled",
          "metadata": {
              "description": "Configuring locally redundant or geo-redundant storage for backup is only allowed during server create. Once the server is provisioned, you cannot change the backup storage redundancy option."
          }
      },
      "mysqlSKU": {
          "type": "string",
          "defaultValue": "GP_Gen5_2",
          "metadata": {
              "description": "There is a connection limit depending on the SKU type and number of cores."
          }
      },
      "mysqlStorageMBSize": {
          "type": "int",
          "maxValue": 4096000,
          "defaultValue": 51200,
          "metadata": {
              "description": "Space and IOPS vary depending on the SKU and allocated storage size."
          } 
      },
      "mysqlReadReplicaRegion": {
          "type": "string",
          "defaultValue": "[resourceGroup().location]",
          "metadata": {
              "description": "Azure region where the read replica will be deployed."
          }
      },        
      "numberOfReplicas": {
          "type": "int",
          "defaultValue": 0,
          "allowedValues": [0,1,2,3,4,5],
          "metadata": {
              "description": "Number of replica instances to be deployed."
          }
      },"mysqlVersion": {
          "type": "string",
          "allowedValues": [
              "5.6",
              "5.7"
          ],
          "defaultValue": "5.7",
          "metadata": {
              "description": "MySQL version."
          }
      },
      "mysqlSubnetAddressPrefix": {
          "type": "string",
          "defaultValue": "10.0.2.0/24",
          "metadata": {
              "description": "MySQL Subnet Address Prefix. Note: only supported in General Purpose or Memory Optimized tiers."
          }
      }
  },
  "variables": {
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "nicName": "[concat(parameters('VMName'),'NIC')]",
    "publicIPAddressName": "[concat(parameters('VMName'),'PublicIP')]",
    "virtualNetworkName": "[concat(parameters('VMName'),'VNET')]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('loginUserName'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('authenticationKey')]"
          }
        ]
      }
    }
  },
  "variables": {
    "subnetName": "[concat(parameters('prefix'),'Subnet')]",
    "virtualNetworkName": "[concat(parameters('prefix'),'VNET')]",
    "lbName": "[concat(parameters('prefix'),'LB')]",
    "lbPublicIpAddressName": "[concat(parameters('prefix'),'PublicIP')]",
    "lbFrontEndName": "[concat(variables('lbName'),'FE')]",
    "lbBackendPoolName": "[concat(variables('lbName'),'BEPool')]",
    "lbProbeHttpName": "[concat(variables('lbName'),'HTTPProbe')]",
    "lbProbeHttpsName": "[concat(variables('lbName'),'HTTPSProbe')]",
    "lbRuleHttpName": "[concat(variables('lbName'),'HTTPRule')]",
    "lbRuleHttpsName": "[concat(variables('lbName'),'HTTPSRule')]",
    "lbNATPoolName": "[concat(variables('lbName'),'NATPool')]"
  },
  "variables": {
      "_artifactsLocation": "https://raw.githubusercontent.com/yountaechung/LAMP/master/",
      "_artifactsLocationSasToken": "",
      "subnetApiVersion": "2019-04-01",
      "mysqlserversApiVersion": "2017-12-01",
      "mysqldatabasesApiVersion": "2017-12-01",
      "mysqlvnetrulesApiVersion": "2017-12-01",
      "mysqlfwrulesApiVersion": "2017-12-01",
      "deploymentsApiVersion": "2019-05-01",
      "nestedtemplateMySQLReplica": "[uri(variables('_artifactsLocation'), concat('nested/mysqlReplica.json', variables('_artifactsLocationSasToken')))]",
      "sourceServerId": "[resourceId('Microsoft.DBforMySQL/servers', variables('mysqlName'))]",
      "mysqlName": "[concat(parameters('prefix'), 'mysql')]",
      "virtualNetworkName": "[concat(parameters('prefix'), 'VNET')]",
      "mysqlSubnetName": "[concat(variables('mysqlName'), 'Subnet')]",
      "virtualNetworkRuleName": "AllowSubnet",
      "firewallrules": {
          "batch": {
              "rules": [
                  {
                      "Name": "rule1",
                      "StartIpAddress": "0.0.0.0",
                      "EndIpAddress": "255.255.255.255"
                  },
                  {
                      "Name": "rule2",
                      "StartIpAddress": "0.0.0.0",
                      "EndIpAddress": "255.255.255.255"
                  }
              ]
          }
      },
  "resources": [
    {
      "apiVersion": "2017-05-10",
      "name": "pid-877696cf-d5a0-001f-9954-ab370b719474",
      "comments": "GUID for tracking production pilot deployments intended for Gaming-LAMP-01-Create-VM.",
      "type": "Microsoft.Resources/deployments",
      "properties": {
          "mode": "Incremental",
          "template": {
            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
          }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-03-01",
      "name": "[parameters('VMName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VMSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('VMName')]",
          "adminUsername": "[parameters('loginUserName')]",
          "adminPassword": "[if(equals(parameters('authenticationMethod'),'Password'), parameters('authenticationKey'),json('null'))]",
          "linuxConfiguration": "[if(equals(parameters('authenticationMethod'), 'Password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
            "imageReference": {
              "publisher": "Canonical",
              "offer": "UbuntuServer",
              "sku": "[parameters('ubuntuOSVersion')]",
              "version": "latest"
            },
            "osDisk": {
              "createOption": "FromImage"
            },
            "dataDisks": [
              {
                "diskSizeGB": "[parameters('VMDataDiskSize')]",
                "lun": 0,
                "createOption": "Empty"
              }
            ]
          },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2019-04-01",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-04-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-04-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    }
  ],
   { 
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-03-01",
      "name": "[concat(parameters('VMName'),'/config-apache-php')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "config-apache-php"
      },
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/yountaechung/LAMP/custom-parameters/nested/lampinstall.sh"
          ]
        },
        "protectedSettings": {
          "commandToExecute":  "sudo sh lampinstall.sh"
        }
      }
    }
  ],
   {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-04-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('VNETAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetAddressPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2018-12-01",
      "name": "[variables('lbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('lbSKU')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIpAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('lbFrontEndName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIpAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('lbBackendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('lbRuleHttpName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), variables('lbFrontEndName'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('lbBackendPoolName'))]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "enableTcpReset": false,
              "loadDistribution": "Default",
              "disableOutboundSnat": false,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), variables('lbProbeHttpName'))]"
              }
            }
          },
          {
            "name": "[variables('lbRuleHttpsName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), variables('lbFrontEndName'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('lbBackendPoolName'))]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "enableTcpReset": false,
              "loadDistribution": "Default",
              "disableOutboundSnat": false,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), variables('lbProbeHttpsName'))]"
              }
            }
          }
        ],
        "inboundNatPools":[
          {
            "name": "[concat(variables('lbNATPoolName'))]",
            "properties": {
                "frontendPortRangeStart": "[parameters('LBFEPortRangeStart')]",
                "frontendPortRangeEnd": "[parameters('LBFEPortRangeEnd')]",
                "backendPort": 22,
                "protocol": "Tcp",
                "idleTimeoutInMinutes": 4,
                "enableFloatingIP": false,
                "enableTcpReset": false,
                "frontendIPConfiguration": {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName')), concat('/frontendIPConfigurations/', variables('lbFrontEndName')))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('lbProbeHttpName')]",
            "properties": {
              "protocol": "Http",
              "port": 80,
              "requestPath": "/",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "[variables('lbProbeHttpsName')]",
            "properties": {
              "protocol": "Https",
              "port": 443,
              "requestPath": "/",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2018-12-01",
      "name": "[variables('lbPublicIPAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('lbSKU')]"
      },
      "properties": {
        "publicIPAddressVersion": "[parameters('publicIPVersion')]",
        "publicIPAllocationMethod": "[parameters('publicIPAllocation')]"
      }
    }
     {
          "type": "Microsoft.Network/virtualNetworks/subnets",
          "apiVersion": "[variables('subnetApiVersion')]",
          "name": "[concat(variables('virtualNetworkName'), '/', variables('mysqlSubnetName'))]",
          "location": "[parameters('location')]",
          "properties": {
              "addressPrefix": "[parameters('mysqlSubnetAddressPrefix')]",
              "serviceEndpoints": [
                  {
                      "service": "Microsoft.Sql"
                  }
              ]
          }
      },
      {
          "type": "Microsoft.DBforMySQL/servers",
          "apiVersion": "[variables('mysqlserversApiVersion')]",
          "name": "[variables('mysqlName')]",
          "location": "[parameters('location')]",
          "sku": {
              "name": "[parameters('mysqlSKU')]"
          },
          "properties": {
              "version": "[parameters('mysqlVersion')]",
              "administratorLogin": "[parameters('mysqlUserName')]",
              "administratorLoginPassword": "[parameters('mysqlPassword')]",
              "storageProfile": {
                  "storageMB": "[parameters('mysqlStorageMBSize')]",
                  "backupRetentionDays": "[parameters('mysqlBackupRetainedDays')]",
                  "geoRedundantBackup": "[parameters('mysqlGeoRedundantBackup')]"
              },
              "createMode": "Default"
          },
          "resources": [
              {
                  "type": "Microsoft.DBforMySQL/servers/databases",
                  "apiVersion": "[variables('mysqldatabasesApiVersion')]",
                  "name": "[concat(variables('mysqlName'), '/', parameters('mysqlDBName'))]",
                  "properties": {
                      "charset": "utf8",
                      "collation": "utf8_general_ci"
                  },
                  "dependsOn": [
                      "[concat('Microsoft.DBforMySQL/servers/', variables('mysqlName'))]"
                  ]
              },
              {
                  "type": "virtualNetworkRules",
                  "apiVersion": "[variables('mysqlvnetrulesApiVersion')]",
                  "name": "[variables('virtualNetworkRuleName')]",
                  "properties": {
                      "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('mysqlSubnetName'))]",
                      "ignoreMissingVnetServiceEndpoint": false
                  },
                  "dependsOn": [
                      "[variables('mysqlSubnetName')]",
                      "[concat('Microsoft.DBforMySQL/servers/', variables('mysqlName'))]"
                  ]
              }
          ]
      },
  {
          "type": "Microsoft.DBforMySQL/servers/firewallRules",
          "apiVersion": "[variables('mysqlfwrulesApiVersion')]",
          "name": "[concat(variables('mysqlName'),'/',variables('firewallrules').batch.rules[copyIndex()].Name)]",
          "location": "[parameters('location')]",
          "dependsOn": [
              "[concat('Microsoft.DBforMySQL/servers/', variables('mysqlName'))]"
          ],
          "copy": {
              "name": "firewallRulesCopy",
              "mode": "Serial",
              "batchSize": 2,
              "count": "[length(variables('firewallrules').batch.rules)]"
          },
          "properties": {
              "startIpAddress": "[variables('firewallrules').batch.rules[copyIndex()].StartIpAddress]",
              "endIpAddress": "[variables('firewallrules').batch.rules[copyIndex()].EndIpAddress]"
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "[variables('deploymentsApiVersion')]",
          "name": "MySQLServerReplicas",
          "condition": "[greater(parameters('numberOfReplicas'),0)]",
          "dependsOn": [
              "[concat('Microsoft.DBforMySQL/servers/', variables('mysqlName'))]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri":"[variables('nestedtemplateMySQLReplica')]"
              },
              "parameters": {
                  "sku": {
                      "value": "[variables('sku')]"
                  },
                  "serverName": {
                      "value": "[concat(variables('mysqlName'),'-replica')]"
                  },
                  "location": {
                      "value": "[parameters('mysqlReadReplicaRegion')]"
                  },
                  "numberOfReplicas": {
                      "value": "[parameters('numberOfReplicas')]"
                  },
                  "backupRetentionDays": {
                      "value": "[parameters('mysqlBackupRetainedDays')]"
                  },
                  "geoRedundantBackup": {
                      "value": "[parameters('mysqlGeoRedundantBackup')]"
                  },
                  "sourceServerId": {
                      "value": "[variables('sourceServerId')]"
                  }
              }
          }
      }
  ]
}
  ],
  "outputs": {
  }
}